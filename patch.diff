diff --git a/cmd/client/main.go b/cmd/client/main.go
index e6d45e2..211e9b4 100644
--- a/cmd/client/main.go
+++ b/cmd/client/main.go
@@ -1,13 +1,14 @@
 package main
 
 import (
+	"github.com/otie173/odinbit/internal/client/common"
 	"github.com/otie173/odinbit/internal/pkg/client"
 	"github.com/otie173/odinbit/resources"
 )
 
 func main() {
 
-	c := client.New("Odinbit", 1920, 1080)
+	c := client.New("Odinbit", common.ScreenWidth, common.ScreenHeight)
 	c.Load()
 	resources.Load()
 	c.Run()
diff --git a/internal/client/camera/camera.go b/internal/client/camera/camera.go
index 00b13b6..5b1c95b 100644
--- a/internal/client/camera/camera.go
+++ b/internal/client/camera/camera.go
@@ -1,7 +1,10 @@
 package camera
 
 import (
+	"math"
+
 	rl "github.com/gen2brain/raylib-go/raylib"
+	"github.com/otie173/odinbit/internal/client/common"
 	"github.com/otie173/odinbit/internal/client/player"
 )
 
@@ -10,7 +13,26 @@ var (
 )
 
 func LoadCamera() {
-	Camera = rl.NewCamera2D(rl.NewVector2(float32(rl.GetScreenWidth()/2), float32(rl.GetScreenHeight()/2)), rl.NewVector2(256, 256), 0.0, 8.0)
+	screenWidth := float32(rl.GetScreenWidth())
+	screenHeight := float32(rl.GetScreenHeight())
+	baseWidth := float32(common.BaseRenderWidth)
+	baseHeight := float32(common.BaseRenderHeight)
+
+	var scale float32 = 1.0
+	if baseWidth > 0 && baseHeight > 0 {
+		widthScale := screenWidth / baseWidth
+		heightScale := screenHeight / baseHeight
+		scale = float32(math.Min(float64(widthScale), float64(heightScale)))
+		if scale <= 0 {
+			scale = 1
+		}
+	}
+
+	const baseZoom float32 = 8.0
+	zoom := baseZoom * scale
+	offset := rl.NewVector2(screenWidth/2, screenHeight/2)
+
+	Camera = rl.NewCamera2D(offset, rl.NewVector2(256, 256), 0.0, zoom)
 }
 
 func UpdateCamera() {
diff --git a/internal/client/common/common.go b/internal/client/common/common.go
index 8358627..d1f2964 100644
--- a/internal/client/common/common.go
+++ b/internal/client/common/common.go
@@ -8,3 +8,10 @@ const (
 	Game
 	ConnClosed
 )
+
+const (
+	ScreenWidth      int32 = 1280
+	ScreenHeight     int32 = 720
+	BaseRenderWidth  int32 = 1920
+	BaseRenderHeight int32 = 1080
+)
diff --git a/internal/client/scene/scene.go b/internal/client/scene/scene.go
index e69133a..fe4249c 100644
--- a/internal/client/scene/scene.go
+++ b/internal/client/scene/scene.go
@@ -3,6 +3,7 @@ package scene
 import (
 	"image/color"
 	"log"
+	"math"
 	"os"
 
 	"github.com/gen2brain/raylib-go/raygui"
@@ -44,15 +45,56 @@ type Handler struct {
 	screenHeight int32
 	currentScene common.Scene
 	netHandler   *net.Handler
+	uiScale      float32
 }
 
 func New(screenWidth, screenHeight int32, scene common.Scene, netHandler *net.Handler) *Handler {
+	scaleX := float32(screenWidth) / float32(common.BaseRenderWidth)
+	scaleY := float32(screenHeight) / float32(common.BaseRenderHeight)
+	uiScale := float32(math.Min(float64(scaleX), float64(scaleY)))
+	if uiScale <= 0 {
+		uiScale = 1
+	}
 	return &Handler{
 		screenWidth:  screenWidth,
 		screenHeight: screenHeight,
 		currentScene: scene,
 		netHandler:   netHandler,
+		uiScale:      uiScale,
+	}
+}
+
+func roundToInt32(v float32) int32 {
+	return int32(math.Round(float64(v)))
+}
+
+func sizeToInt32(v float32) int32 {
+	val := int32(math.Round(float64(v)))
+	if val < 1 {
+		return 1
+	}
+	return val
+}
+
+func (h *Handler) scale(v float32) float32 {
+	return v * h.uiScale
+}
+
+func (h *Handler) scaledInt(v int32) int32 {
+	scaled := int32(math.Round(float64(float32(v) * h.uiScale)))
+	if scaled < 1 {
+		return 1
+	}
+	return scaled
+}
+
+func (h *Handler) drawBackground() {
+	if BkgTexture.ID == 0 {
+		return
 	}
+	source := rl.NewRectangle(0, 0, float32(BkgTexture.Width), float32(BkgTexture.Height))
+	dest := rl.NewRectangle(0, 0, float32(h.screenWidth), float32(h.screenHeight))
+	rl.DrawTexturePro(BkgTexture, source, dest, rl.NewVector2(0, 0), 0, rl.White)
 }
 
 func (h *Handler) drawFunc(fn func()) {
@@ -74,42 +116,62 @@ func (h *Handler) Handle() {
 	switch h.currentScene {
 	case common.Title:
 		h.drawFunc(func() {
-			x := float32(h.screenWidth/2 - 900/2)
-			y := float32(340)
-			rl.DrawTexture(BkgTexture, 0, 0, rl.White)
-			rl.DrawRectangle(int32(x), int32(h.screenHeight/2-550/2), 900, 550, transparentColor)
-			raygui.SetStyle(raygui.DEFAULT, raygui.TEXT_SIZE, 32)
-			raygui.GroupBox(rl.NewRectangle(x, float32(h.screenHeight/2-550/2), 900, 550), "Odinbit")
-			if raygui.Button(rl.NewRectangle(x+40, y, 820, 100), "Singleplayer") {
+			h.drawBackground()
+			panelWidth := h.scale(900)
+			panelHeight := h.scale(550)
+			panelX := float32(h.screenWidth)/2 - panelWidth/2
+			panelY := float32(h.screenHeight)/2 - panelHeight/2
+			buttonX := panelX + h.scale(40)
+			buttonY := panelY + h.scale(75)
+			buttonWidth := h.scale(820)
+			buttonHeight := h.scale(100)
+			buttonSpacing := h.scale(150)
+
+			rl.DrawRectangle(roundToInt32(panelX), roundToInt32(panelY), sizeToInt32(panelWidth), sizeToInt32(panelHeight), transparentColor)
+			raygui.SetStyle(raygui.DEFAULT, raygui.TEXT_SIZE, int64(h.scaledInt(32)))
+			raygui.GroupBox(rl.NewRectangle(panelX, panelY, panelWidth, panelHeight), "Odinbit")
+			if raygui.Button(rl.NewRectangle(buttonX, buttonY, buttonWidth, buttonHeight), "Singleplayer") {
 				selectedMode = singleplayer
 			}
-			if raygui.Button(rl.NewRectangle(x+40, y+150, 820, 100), "Multiplayer") {
+			if raygui.Button(rl.NewRectangle(buttonX, buttonY+buttonSpacing, buttonWidth, buttonHeight), "Multiplayer") {
 				selectedMode = multiplayer
 				h.currentScene = common.Connect
 			}
-			if raygui.Button(rl.NewRectangle(x+40, y+150*2, 820, 100), "Exit") {
+			if raygui.Button(rl.NewRectangle(buttonX, buttonY+buttonSpacing*2, buttonWidth, buttonHeight), "Exit") {
 				rl.CloseWindow()
 				os.Exit(0)
 			}
 		})
 	case common.Connect:
 		h.drawFunc(func() {
-			x := float32(h.screenWidth/2 - 900/2)
-			y := float32(340)
-			rl.DrawTexture(BkgTexture, 0, 0, rl.White)
-			rl.DrawRectangle(int32(x), int32(h.screenHeight/2-550/2), 900, 550, transparentColor)
-			raygui.GroupBox(rl.NewRectangle(x, float32(h.screenHeight/2-550/2), 900, 550), "Connect")
-			if raygui.TextBox(rl.NewRectangle(x+40, y, 820, 80), &nickname, 64, nicknameEdit) {
+			h.drawBackground()
+			panelWidth := h.scale(900)
+			panelHeight := h.scale(550)
+			panelX := float32(h.screenWidth)/2 - panelWidth/2
+			panelY := float32(h.screenHeight)/2 - panelHeight/2
+			fieldX := panelX + h.scale(40)
+			fieldY := panelY + h.scale(75)
+			fieldWidth := h.scale(820)
+			fieldHeight := h.scale(80)
+			fieldSpacing := h.scale(110)
+
+			rl.DrawRectangle(roundToInt32(panelX), roundToInt32(panelY), sizeToInt32(panelWidth), sizeToInt32(panelHeight), transparentColor)
+			raygui.GroupBox(rl.NewRectangle(panelX, panelY, panelWidth, panelHeight), "Connect")
+			if raygui.TextBox(rl.NewRectangle(fieldX, fieldY, fieldWidth, fieldHeight), &nickname, 64, nicknameEdit) {
 				nicknameEdit = !nicknameEdit
 			}
-			if raygui.TextBox(rl.NewRectangle(x+40, y+110, 820, 80), &httpAddress, 16, httpAddressEdit) {
+			if raygui.TextBox(rl.NewRectangle(fieldX, fieldY+fieldSpacing, fieldWidth, fieldHeight), &httpAddress, 16, httpAddressEdit) {
 				httpAddressEdit = !httpAddressEdit
 			}
-			if raygui.TextBox(rl.NewRectangle(x+40, y+110*2, 820, 80), &tcpAddress, 64, tcpAddressEdit) {
+			if raygui.TextBox(rl.NewRectangle(fieldX, fieldY+fieldSpacing*2, fieldWidth, fieldHeight), &tcpAddress, 64, tcpAddressEdit) {
 				tcpAddressEdit = !tcpAddressEdit
 			}
 
-			if raygui.Button(rl.NewRectangle(float32(h.screenWidth/2-350/2), y+115*3, 350, 85), "Connect") {
+			buttonWidth := h.scale(350)
+			buttonHeight := h.scale(85)
+			buttonX := float32(h.screenWidth)/2 - buttonWidth/2
+			buttonY := panelY + h.scale(420)
+			if raygui.Button(rl.NewRectangle(buttonX, buttonY, buttonWidth, buttonHeight), "Connect") {
 				if !h.netHandler.IsConnected() {
 					data, err := h.netHandler.LoadTextures("http://0.0.0.0:9999")
 					if err != nil {
@@ -188,24 +250,29 @@ func (h *Handler) Handle() {
 	case common.ConnClosed:
 		rl.BeginDrawing()
 		rl.ClearBackground(bkgColor)
-		rl.DrawTexture(BkgTexture, 0, 0, rl.White)
+		h.drawBackground()
 
-		x := float32(h.screenWidth/2 - 900/2)
-		groupBoxHeight := float32(350)
-		groupBoxY := float32(h.screenHeight/2) - groupBoxHeight/2
+		panelWidth := h.scale(900)
+		panelHeight := h.scale(350)
+		panelX := float32(h.screenWidth)/2 - panelWidth/2
+		panelY := float32(h.screenHeight)/2 - panelHeight/2
 
-		rl.DrawRectangle(int32(x), int32(groupBoxY), 900, int32(groupBoxHeight), transparentColor)
-		raygui.GroupBox(rl.NewRectangle(x, groupBoxY, 900, groupBoxHeight), "Notification")
+		rl.DrawRectangle(roundToInt32(panelX), roundToInt32(panelY), sizeToInt32(panelWidth), sizeToInt32(panelHeight), transparentColor)
+		raygui.GroupBox(rl.NewRectangle(panelX, panelY, panelWidth, panelHeight), "Notification")
 
 		text := "Connection closed"
-		fontSize := int32(32)
-		textSize := rl.MeasureTextEx(raygui.GetFont(), text, float32(fontSize), 2)
-		textX := x + 450 - float32(textSize.X)/2
-		textY := groupBoxY + 120
+		fontSize := float32(h.scaledInt(32))
+		spacing := h.scale(2)
+		textSize := rl.MeasureTextEx(raygui.GetFont(), text, fontSize, spacing)
+		textX := panelX + panelWidth/2 - textSize.X/2
+		textY := panelY + h.scale(120)
 		raygui.Label(rl.NewRectangle(textX, textY, textSize.X, textSize.Y), text)
 
-		buttonY := groupBoxY + groupBoxHeight - 105
-		if raygui.Button(rl.NewRectangle(float32(h.screenWidth/2-300/2), buttonY, 300, 70), "Okay ;(") {
+		buttonWidth := h.scale(300)
+		buttonHeight := h.scale(70)
+		buttonX := float32(h.screenWidth)/2 - buttonWidth/2
+		buttonY := panelY + panelHeight - h.scale(105)
+		if raygui.Button(rl.NewRectangle(buttonX, buttonY, buttonWidth, buttonHeight), "Okay ;(") {
 			h.SetScene(common.Title)
 		}
 
diff --git a/internal/pkg/client/client.go b/internal/pkg/client/client.go
index e743423..3cff62e 100644
--- a/internal/pkg/client/client.go
+++ b/internal/pkg/client/client.go
@@ -41,9 +41,8 @@ func New(title string, screenWidth, screenHeight int32) *Client {
 }
 
 func (c *Client) Load() {
+	rl.SetConfigFlags(rl.FlagVsyncHint | rl.FlagWindowUnfocused)
 	rl.InitWindow(c.screenWidth, c.screenHeight, c.title)
-	rl.SetConfigFlags(rl.FlagVsyncHint | rl.FlagWindowUnfocused | rl.FlagFullscreenMode)
-	rl.ToggleFullscreen()
 	rl.SetTargetFPS(int32(rl.GetMonitorRefreshRate(rl.GetCurrentMonitor())))
 	rl.SetExitKey(0)
 	camera.LoadCamera()
diff --git a/internal/server/game/world/handler.go b/internal/server/game/world/handler.go
index ccfb7e6..24e9234 100644
--- a/internal/server/game/world/handler.go
+++ b/internal/server/game/world/handler.go
@@ -6,7 +6,6 @@ import (
 	"github.com/kelindar/binary"
 	"github.com/minio/minlz"
 	"github.com/otie173/odinbit/internal/protocol/packet"
-	"github.com/otie173/odinbit/internal/server/common"
 	"github.com/otie173/odinbit/internal/server/game/player"
 )
 
@@ -33,17 +32,17 @@ func (h *Handler) compressPacket(binaryPacket []byte) ([]byte, error) {
 func (h *Handler) Handle() {
 	players := h.players.GetPlayers()
 	for _, player := range players {
-		binaryOverworldArea, err := h.World.GetWorldArea(player.CurrentX, player.CurrentY)
+		binaryOverworldArea, area, err := h.World.GetWorldArea(player.CurrentX, player.CurrentY)
 		if err != nil {
 			log.Printf("Error! Cant get binary overworld area: %v\n", err)
 		}
 
 		pktStructure := packet.WorldUpdate{
 			Blocks: binaryOverworldArea,
-			StartX: int16(player.CurrentX - common.ViewRadius),
-			StartY: int16(player.CurrentY - common.ViewRadius),
-			EndX:   int16(player.CurrentX + common.ViewRadius),
-			EndY:   int16(player.CurrentY + common.ViewRadius),
+			StartX: int16(area.StartX),
+			StartY: int16(area.StartY),
+			EndX:   int16(area.EndX),
+			EndY:   int16(area.EndY),
 		}
 		//log.Println(pktStructure.StartX, pktStructure.StartY, pktStructure.EndX, pktStructure.EndY, player.CurrentX, player.CurrentY)
 
diff --git a/internal/server/game/world/storage.go b/internal/server/game/world/storage.go
index 7cc9905..30a5dda 100644
--- a/internal/server/game/world/storage.go
+++ b/internal/server/game/world/storage.go
@@ -2,6 +2,7 @@ package world
 
 import (
 	"log"
+	"math"
 
 	"github.com/kelindar/binary"
 	"github.com/otie173/odinbit/internal/server/common"
@@ -34,14 +35,51 @@ func (s *storage) getWorld() ([]byte, error) {
 	return data, err
 }
 
-func (s *storage) getWorldArea(x, y float32) ([]byte, error) {
-	startX := int(x - common.ViewRadius)
-	endX := int(x + common.ViewRadius)
-	startY := int(y - common.ViewRadius)
-	endY := int(y + common.ViewRadius)
+func computeAreaBounds(coord float32) (start, end int) {
+	radius := float64(common.ViewRadius)
+	start = int(math.Floor(float64(coord) - radius))
+	end = int(math.Ceil(float64(coord) + radius))
 
-	areaWidth := endX - startX + 1
-	areaHeight := endY - startY + 1
+	width := end - start
+	if width <= 0 {
+		width = 1
+		end = start + width
+	}
+
+	if start < 0 {
+		end += -start
+		start = 0
+	}
+
+	if end > common.WorldSize {
+		shift := end - common.WorldSize
+		end = common.WorldSize
+		start -= shift
+		if start < 0 {
+			start = 0
+		}
+	}
+
+	if end > common.WorldSize {
+		end = common.WorldSize
+	}
+
+	if end <= start {
+		end = start + 1
+		if end > common.WorldSize {
+			end = common.WorldSize
+		}
+	}
+
+	return start, end
+}
+
+func (s *storage) getWorldArea(x, y float32) ([]byte, common.AreaPositions, error) {
+	startX, endX := computeAreaBounds(x)
+	startY, endY := computeAreaBounds(y)
+
+	areaWidth := endX - startX
+	areaHeight := endY - startY
 	blocks := make([]Block, 0, areaWidth*areaHeight)
 
 	log.Println(startX, endX, startY, endY)
@@ -53,7 +91,8 @@ func (s *storage) getWorldArea(x, y float32) ([]byte, error) {
 
 	data, err := binary.Marshal(&blocks)
 	if err != nil {
-		return nil, err
+		return nil, common.AreaPositions{}, err
 	}
-	return data, nil
+
+	return data, common.AreaPositions{StartX: startX, StartY: startY, EndX: endX, EndY: endY}, nil
 }
diff --git a/internal/server/game/world/world.go b/internal/server/game/world/world.go
index 120a2da..0deba8f 100644
--- a/internal/server/game/world/world.go
+++ b/internal/server/game/world/world.go
@@ -1,6 +1,7 @@
 package world
 
 import (
+	"github.com/otie173/odinbit/internal/server/common"
 	"github.com/otie173/odinbit/internal/server/game/texture"
 )
 
@@ -44,10 +45,10 @@ func (w *World) GetWorld() ([]byte, error) {
 	return binaryWorld, nil
 }
 
-func (w *World) GetWorldArea(x, y float32) ([]byte, error) {
-	binaryWorldArea, err := w.storage.getWorldArea(x, y)
+func (w *World) GetWorldArea(x, y float32) ([]byte, common.AreaPositions, error) {
+	binaryWorldArea, area, err := w.storage.getWorldArea(x, y)
 	if err != nil {
-		return nil, err
+		return nil, common.AreaPositions{}, err
 	}
-	return binaryWorldArea, nil
+	return binaryWorldArea, area, nil
 }
